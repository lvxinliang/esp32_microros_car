#include <Arduino.h>
#include <micro_ros_platformio.h>
#include <driver/ledc.h>

#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>

rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
#include <driver/ledc.h>

#define AIN1 15
#define AIN2 2
#define BIN1 16
#define BIN2 17

#define PWM_CHANNEL_AIN1 LEDC_CHANNEL_0
#define PWM_CHANNEL_AIN2 LEDC_CHANNEL_1
#define PWM_CHANNEL_BIN1 LEDC_CHANNEL_2
#define PWM_CHANNEL_BIN2 LEDC_CHANNEL_3

#define PWM_FREQUENCY 5000 // PWM频率为5000Hz
#define PWM_RESOLUTION LEDC_TIMER_8_BIT // PWM分辨率为8位

void setup_pwm() {
    // 设置PWM定时器
    ledc_timer_config_t pwm_timer;
    pwm_timer.speed_mode = LEDC_HIGH_SPEED_MODE;
    pwm_timer.timer_num = LEDC_TIMER_0;
    pwm_timer.freq_hz = PWM_FREQUENCY;
    pwm_timer.duty_resolution = PWM_RESOLUTION;
    ledc_timer_config(&pwm_timer);

    // 设置PWM通道
    ledc_channel_config_t pwm_channel;
    pwm_channel.speed_mode = LEDC_HIGH_SPEED_MODE;
    pwm_channel.timer_sel = LEDC_TIMER_0;
    pwm_channel.duty = 0; // 初始占空比为0

    // 配置AIN1和AIN2
    pwm_channel.gpio_num = AIN1;
    pwm_channel.channel = PWM_CHANNEL_AIN1;
    ledc_channel_config(&pwm_channel);
    pwm_channel.gpio_num = AIN2;
    pwm_channel.channel = PWM_CHANNEL_AIN2;
    ledc_channel_config(&pwm_channel);

    // 配置BIN1和BIN2
    pwm_channel.gpio_num = BIN1;
    pwm_channel.channel = PWM_CHANNEL_BIN1;
    ledc_channel_config(&pwm_channel);
    pwm_channel.gpio_num = BIN2;
    pwm_channel.channel = PWM_CHANNEL_BIN2;
    ledc_channel_config(&pwm_channel);
}

void forward(int speed) {
    // AIN1 = speed, AIN2 = 0
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_AIN1, speed);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_AIN1);
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_AIN2, 0);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_AIN2);

    // BIN1 = speed, BIN2 = 0
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_BIN1, speed);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_BIN1);
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_BIN2, 0);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_BIN2);
}

void backward(int speed) {
    // AIN1 = 0, AIN2 = speed
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_AIN1, 0);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_AIN1);
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_AIN2, speed);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_AIN2);

    // BIN1 = 0, BIN2 = speed
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_BIN1, 0);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_BIN1);
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_BIN2, speed);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, PWM_CHANNEL_BIN2);
}
void setup()
{
  setup_pwm();
  forward(150);
  Serial.begin(115200);
  // 设置通过串口进行MicroROS通信
  set_microros_serial_transports(Serial);
  // 延时时一段时间，等待设置完成
  delay(2000);
  // 初始化内存分配器
  allocator = rcl_get_default_allocator();
  // 创建初始化选项
  rclc_support_init(&support, 0, NULL, &allocator);
  // 创建节点 hello_microros
  rclc_node_init_default(&node, "hello_microros", "", &support);
  // 创建执行器
  rclc_executor_init(&executor, &support.context, 1, &allocator);
}

void loop()
{
  delay(100);
  // 循环处理数据
  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
}
